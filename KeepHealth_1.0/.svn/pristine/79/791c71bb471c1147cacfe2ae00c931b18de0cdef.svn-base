package com.ytdinfo.keephealth.ui.uzanstore;

import java.util.HashMap;

import android.annotation.SuppressLint;
import android.app.AlertDialog;
import android.content.Context;
import android.content.Intent;
import android.graphics.Bitmap;
import android.net.Uri;
import android.os.Bundle;
import android.text.TextUtils;
import android.util.Log;
import android.view.KeyEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.webkit.CookieManager;
import android.webkit.CookieSyncManager;
import android.webkit.JavascriptInterface;
import android.webkit.WebSettings;
import android.webkit.WebView;
import android.webkit.WebViewClient;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.TextView;

import com.umeng.analytics.MobclickAgent;
import com.umeng.analytics.MobclickAgentJSInterface;
import com.youzan.sdk.YouzanBridge;
import com.youzan.sdk.YouzanSDK;
import com.youzan.sdk.model.goods.GoodsShareModel;
import com.youzan.sdk.web.bridge.IBridgeEnv;
import com.youzan.sdk.web.event.ShareDataEvent;
import com.youzan.sdk.web.event.UserInfoEvent;
import com.youzan.sdk.web.plugin.YouzanChromeClient;
import com.youzan.sdk.web.plugin.YouzanWebClient;
import com.ytdinfo.keephealth.R;
import com.ytdinfo.keephealth.app.Constants;
import com.ytdinfo.keephealth.ui.BaseActivity;
import com.ytdinfo.keephealth.ui.login.LoginActivity;
import com.ytdinfo.keephealth.ui.view.MyProgressDialog;
import com.ytdinfo.keephealth.ui.view.MyWebView;
import com.ytdinfo.keephealth.utils.LogUtil;
import com.ytdinfo.keephealth.utils.SharedPrefsUtil;
import com.ytdinfo.keephealth.utils.ToastUtil;

@SuppressLint("JavascriptInterface")
public class WebActivity extends BaseActivity implements OnClickListener {
	private final String TAG = "WebViewActivity";
	private MyWebView webview;
	private Button bt_update;
	private String loadUrl;

	private ImageButton back;

	private TextView title;

	private Button other;

	private String current_url;

	private boolean isPageLoaded = false;

	private MyProgressDialog myProgressDialog, myProgressDialog2;

	/**
	 * H5和原生的桥接对象
	 */
	private YouzanBridge bridge;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_webview);

		back = (ImageButton) findViewById(R.id.id_webview_back);
		title = (TextView) findViewById(R.id.id_webview_title);
		other = (Button) findViewById(R.id.id_webview_save);

		title.setText("帮忙医商城");

		myProgressDialog2 = new MyProgressDialog(this);
		myProgressDialog2.setMessage("正在请求...");
		myProgressDialog2.show();

		loadUrl = "https://wap.koudaitong.com/v2/showcase/homepage?alias=1e99alxjl";

		loadWebView();

		initBridge();
		openWebview();

		webViewListener();

	}

	/**
	 * 同步一下cookie
	 */
	public static void synCookies(Context context, String url) {
		CookieSyncManager.createInstance(context);
		CookieManager cookieManager = CookieManager.getInstance();
		cookieManager.setAcceptCookie(true);
		cookieManager.removeSessionCookie();// 移除
		String token = SharedPrefsUtil.getValue(Constants.TOKEN, null);
		cookieManager.setCookie(url, "token=" + token + ";path=/");// cookies是在HttpClient中获得的cookie
		CookieSyncManager.getInstance().sync();
	}

	@SuppressLint({ "NewApi", "SetJavaScriptEnabled" })
	private void loadWebView() {
		// 实例化WebView对象
		// webview = new MyWebView(WebViewActivity.this);
		LogUtil.i(TAG, "loadWebView===实例化WebView===");
		webview = (MyWebView) findViewById(R.id.id_webview_view);
		new MobclickAgentJSInterface(this, webview);

		WebSettings webSettings = webview.getSettings();
		// 设置WebView属性，能够执行Javascript脚本
		webSettings.setJavaScriptEnabled(true);
		webSettings.setJavaScriptCanOpenWindowsAutomatically(true);
		//
		webSettings.setUseWideViewPort(true);// 关键点
		webSettings.setLoadWithOverviewMode(true);
		webSettings.setAppCacheEnabled(true);

		webSettings.setAppCacheMaxSize(8 * 1024 * 1024); // 8MB
		// webSettings.setAppCachePath(Constants.WEBVIEW_CACHE_DIR );
		String appCacheDir = this.getApplicationContext()
				.getDir("cache", Context.MODE_PRIVATE).getPath();
		webSettings.setAppCachePath(appCacheDir);
		webSettings.setAllowFileAccess(true);
		webSettings.setDomStorageEnabled(true);

		webSettings.setCacheMode(WebSettings.LOAD_DEFAULT);

		// js调用安卓方法
		webview.addJavascriptInterface(this, "RedirectListner");
	}

	/**
	 * 初始化桥接对象.
	 * 
	 * <pre>
	 * 可使用的扩展有:
	 *      {@link UserInfoEvent}
	 *          用户同步登录,使用{@link YouzanSDK#asyncRegisterUser}完成信息注册的可以忽略这个扩展;
	 *          具体参考{@link LoginWebActivity}
	 * 
	 *      {@link ShareDataEvent}
	 *          获取分享数据
	 *          具体参考{@link ShareEvent}
	 * 
	 * ...
	 * </pre>
	 */
	private void initBridge() {
		bridge = YouzanBridge.build(this, webview)
				.setWebClient(new WebClient())
				.setChromeClient(new ChromeClient()).create();
		bridge.hideTopbar(true);// 隐藏顶部店铺信息栏
		// 根据需求添加相应的桥接事件
		bridge.add(new ShareEvent());// 分享
	}

	/**
	 * 打开链接
	 */
	private void openWebview() {
		if (webview != null && !TextUtils.isEmpty(loadUrl)) {
			webview.loadUrl(loadUrl);
		}
	}

	/**
	 * 自定义ChromeClient 必须继承自{@link YouzanWebClient}
	 */
	private class ChromeClient extends YouzanChromeClient {

		@Override
		public void onReceivedTitle(WebView view, String title) {
			super.onReceivedTitle(view, title);
			// 这里获取到WebView的标题
		}
	}

	/**
	 * 自定义WebClient 必须继承自{@link YouzanWebClient}
	 */
	private class WebClient extends YouzanWebClient {

		@Override
		public boolean shouldOverrideUrlLoading(WebView view, String url) {
			if (super.shouldOverrideUrlLoading(view, url)) {
				return true;
			}
			return false;// 或者做其他操作
		}
	}

	/**
	 * @author zhangyh2 ShareEvent 上午10:09:50 TODO 分享
	 */
	public class ShareEvent extends ShareDataEvent {
		/**
		 * 回传分享数据, 再调用组件进行分享
		 * 
		 * @param env
		 *            一些上下文环境
		 * @param data
		 *            分享数据
		 */
		@Override
		public void call(IBridgeEnv env, GoodsShareModel data) {
			new AlertDialog.Builder(env.getActivity())
					.setTitle(data.getTitle())
					.setMessage(data.getDesc() + "\n\n" + data.getLink())
					.create().show();
		}
	}

	/**
	 * 页面回退 bridge.pageGoBack()返回True表示处理的是网页的回退
	 */
	@Override
	public void onBackPressed() {
		if (bridge == null || !bridge.pageGoBack()) {
			super.onBackPressed();
		}
	}

	private void webViewListener() {
		back.setOnClickListener(this);
		webview.setWebViewClient(new WebViewClient() {
			// 加载失败
			@Override
			public void onReceivedError(WebView view, int errorCode,
					String description, String failingUrl) {

				LogUtil.i(TAG, "加载失败===" + errorCode + "---" + description
						+ "---" + failingUrl + "---");

				current_url = failingUrl;
				webview.clearView();
				if (failingUrl.contains("#")) {
					String[] temp;
					temp = failingUrl.split("#");
					webview.loadUrl(temp[0]);
					try {
						Thread.sleep(400);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
					webview.loadUrl(failingUrl);
				} else {
					webview.loadUrl("file:///android_asset/error.html#"
							+ failingUrl);
				}

				ToastUtil.showMessage("页面加载失败，请点击重新加载");

				// super.onReceivedError(view, errorCode, description,
				// failingUrl);

			}

			@Override
			public boolean shouldOverrideUrlLoading(WebView view, String url) {
				/*
				 * Toast.makeText(getApplicationContext(),
				 * "WebViewClient.shouldOverrideUrlLoading",
				 * Toast.LENGTH_SHORT);
				 */
				LogUtil.i(TAG, "拦截url---shouldOverrideUrlLoading-->" + url);
				if (url.startsWith("tel:")) {
					Intent intent = new Intent(Intent.ACTION_DIAL, Uri
							.parse(url));
					startActivity(intent);
				} else {
					HashMap<String, String> hashmap = new HashMap<String, String>();
					if (null != SharedPrefsUtil.getValue(Constants.TOKEN, null)) {
						hashmap.put("token",
								SharedPrefsUtil.getValue(Constants.TOKEN, null));
					}
					webview.loadUrl(url, hashmap);
				}

				return true;
			}

			@Override
			public void onLoadResource(WebView view, String url) {
				// TODO Auto-generated method stub
				super.onLoadResource(view, url);
			}

			@Override
			public void onPageStarted(WebView view, String url, Bitmap favicon) {
				isPageLoaded = false;
				LogUtil.i(TAG, "拦截url---onPageStarted-->" + url);
				HashMap<String, String> hashmap = new HashMap<String, String>();
				if (null != SharedPrefsUtil.getValue(Constants.TOKEN, null)) {
					hashmap.put("token",
							SharedPrefsUtil.getValue(Constants.TOKEN, null));
				}
				if (url.toLowerCase().contains("/login")) {
					Intent i11 = new Intent();
					i11.setClass(WebActivity.this, LoginActivity.class);
					startActivity(i11);
				}
				super.onPageStarted(view, url, favicon);
			}

			@Override
			public void onPageFinished(WebView view, String url) {
				super.onPageFinished(view, url);
				isPageLoaded = true;
				LogUtil.i(TAG, "页面加载完后==onPageFinished==" + url);

				myProgressDialog2.dismiss();
			}
		});
	}

	@Override
	public boolean onKeyDown(int keyCode, KeyEvent event) {

		if (keyCode == KeyEvent.KEYCODE_BACK) {
			LogUtil.i(TAG, "==onKeyDown==");
			if (webview.canGoBack()) {
				webview.goBack();
			} else {
				finish();
			}
		}
		return false;
	}

	/**
	 * JS调用的方法
	 */
	@JavascriptInterface
	public void goToIndex() {
		Log.i(TAG, "goToIndex()");
		finish();
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see android.view.View.OnClickListener#onClick(android.view.View)
	 */
	@Override
	public void onClick(View v) {
		// TODO Auto-generated method stub
		switch (v.getId()) {
		case R.id.id_webview_back:
			if (webview.canGoBack()) {
				webview.goBack();
			} else {
				finish();
			}
			break;

		default:
			break;
		}
	}

	@Override
	public void onResume() {
		super.onResume();
		MobclickAgent.onPageStart("WebActivity");
		MobclickAgent.onResume(this);
	}

	@Override
	public void onPause() {
		super.onPause();

		MobclickAgent.onPageEnd("WebActivity");
		MobclickAgent.onPause(this);
	}

}
